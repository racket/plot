#lang racket

(require rackunit
         plot
         plot/utils
         racket/draw
         racket/runtime-path
         "helpers.rkt")

(x-axis-ticks? #f)
(y-axis-ticks? #f)

(define (do-plot1 output-fn)
 (parameterize ([plot-x-transform  log-transform])
   (output-fn(list (function values 1 5)
                   (function cos 1 5 #:color 3)))))

(define (do-plot2 output-fn)
  (parameterize ([plot-x-transform  cbrt-transform])
    (output-fn (list (function values -2 2)
                     (function cos -2 2 #:color 3)))))

(define (do-plot3 output-fn)  
  (parameterize ([plot-x-transform  log-transform]
                 [plot-y-transform  cbrt-transform])
    (define xs (nonlinear-seq 1 5 20 log-transform))
    (define ys (nonlinear-seq -1 5 20 cbrt-transform))
    (output-fn (points (map vector xs ys)))))

(define-values (do-plot4 do-plot5 do-plot6)
  (let ([trans1 (hand-drawn-transform 25)]
        [trans2 (hand-drawn-transform 100)])
    (values
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1])
         (output-fn (list (function values -2 2)
                          (function cos -2 2 #:color 3)))))

     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans2])
         (output-fn (list (function values -2 2)
                          (function cos -2 2 #:color 3)))))

     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1]
                      [plot-y-transform  trans2])
         (define xs (nonlinear-seq -2 2 20 trans1))
         (define ys (nonlinear-seq -2 2 20 trans2))
         (output-fn (points (map vector xs ys))))))))

(define-values (do-plot7 do-plot8)
  (let ([trans1 (stretch-transform -1/2 1/2 4)]
        [trans2 (stretch-transform -1/2 1/2 1/4)])
    (values
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1]
                      [plot-y-transform  trans2])
         (output-fn (list (y-axis -1/2) (y-axis 1/2)
                          (x-axis -1/2) (x-axis 1/2)
                          (function values -2 2)
                          (function cos -2 2 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1]
                      [plot-y-transform  trans2])
         (define xs (nonlinear-seq -2 2 20 trans1))
         (define ys (nonlinear-seq -2 2 20 trans2))
         (output-fn (points (map vector xs ys))))))))

(define-values (do-plot9 do-plot10 do-plot11)
  (let ()
    (define trans1 (axis-transform-compose id-transform (stretch-transform -1 1 1/4)))
    (define trans2 (axis-transform-compose (stretch-transform -1 1 1/4) id-transform))
    (values
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1])
         (output-fn (list (y-axis -1) (y-axis 1)
                          (function values -2 2)
                          (function cos -2 2 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans2])
         (output-fn (list (y-axis -1) (y-axis 1)
                          (function values -2 2)
                          (function cos -2 2 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1]
                      [plot-y-transform  trans2])
         (define xs (nonlinear-seq -2 2 20 trans1))
         (define ys (nonlinear-seq -2 2 20 trans2))
         (output-fn (points (map vector xs ys))))))))

(define-values (do-plot12 do-plot13 do-plot14)
  (let ()
    (define t1 (stretch-transform -2 -1 4))
    (define t2 (stretch-transform 1 2 4))
    (values
     (lambda (output-fn)
       (parameterize ([plot-x-transform  (axis-transform-compose t1 t2)]
                      [plot-x-ticks      (ticks-add (plot-x-ticks) '(-1 1))])
         (output-fn (list (y-axis -2) (y-axis -1)
                          (y-axis 1) (y-axis 2)
                          (function values -3 3)
                          (function cos -3 3 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  (axis-transform-compose t2 t1)]
                      [plot-x-ticks      (ticks-add (plot-x-ticks) '(-1 1))])
         (output-fn (list (y-axis -2) (y-axis -1)
                          (y-axis 1) (y-axis 2)
                          (function values -3 3)
                          (function cos -3 3 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  (axis-transform-compose t2 t1)]
                      [plot-y-transform  (axis-transform-compose t1 t2)])
         (define xs (nonlinear-seq -3 3 20 (axis-transform-compose t2 t1)))
         (define ys (nonlinear-seq -3 3 20 (axis-transform-compose t1 t2)))
         (output-fn (points (map vector xs ys))))))))

(define-values (do-plot15 do-plot16 do-plot17)
  (let ()
    (define t1 (stretch-transform -2 0 4))
    (define t2 (stretch-transform -1 1 1/4))
    (define t3 (stretch-transform 2 3 4))
    (define trans1 (axis-transform-compose (axis-transform-compose t3 t2) t1))
    (define trans2 (axis-transform-compose (axis-transform-compose t2 t1) t3))
    (values
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1])
         (output-fn (list (y-axis -2) (y-axis 0)
                          (y-axis -1) (y-axis 1)
                          (y-axis 2) (y-axis 3)
                          (function values -3 4)
                          (function cos -3 4 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans2])
         (output-fn (list (y-axis -2) (y-axis 0)
                          (y-axis -1) (y-axis 1)
                          (y-axis 2) (y-axis 3)
                          (function values -3 4)
                          (function cos -3 4 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1]
                      [plot-y-transform  trans2])
         (define xs (nonlinear-seq -3 4 20 trans1))
         (define ys (nonlinear-seq -3 4 20 trans2))
         (output-fn (points (map vector xs ys))))))))

(define-values (do-plot18 do-plot19 do-plot20)
  (let ()
    (define trans1 (axis-transform-compose (stretch-transform 2 3 4) log-transform))
    (define trans2 (axis-transform-compose log-transform (stretch-transform 2 3 4)))
    (values
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1])
         (output-fn (list (y-axis 2) (y-axis 3)
                     (function values 1 5)
                     (function cos 1 5 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans2])
         (output-fn (list (y-axis 2) (y-axis 3)
                     (function values 1 5)
                     (function cos 1 5 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1]
                      [plot-y-transform  trans2])
         (define xs (nonlinear-seq 1 5 20 trans1))
         (define ys (nonlinear-seq 1 5 20 trans2))
         (output-fn (points (map vector xs ys))))))))

(define-values (do-plot21 do-plot22)
  (let ()
    (define trans (collapse-transform -1 1))
    (values
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans])
         (output-fn (list (y-axis 1)
                     (function values -2 2)
                     (function cos -2 2 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans]
                      [plot-y-transform  trans])
         (define xs (nonlinear-seq -2 2 20 trans))
         (output-fn (points (map vector xs xs))))))))

(define-values (do-plot23 do-plot24 do-plot25)
  (let ()
    (define trans1 (axis-transform-compose (collapse-transform 2 3) log-transform))
    (define trans2 (axis-transform-compose log-transform (collapse-transform 2 3)))
    (values
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1])
         (output-fn (list (y-axis 3)
                     (function values 1 5)
                     (function cos 1 5 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans2])
         (output-fn (list (y-axis 3)
                     (function values 1 5)
                     (function cos 1 5 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1]
                      [plot-y-transform  trans2])
         (define xs (nonlinear-seq 1 5 20 trans1))
         (define ys (nonlinear-seq 1 5 20 trans2))
         (output-fn (points (map vector xs ys))))))))

(define-values (do-plot26 do-plot27 do-plot28)
  (let ()
    (define trans1 (axis-transform-compose (stretch-transform -1 1 4)
                                           (collapse-transform -1/2 1/2)))
    (define trans2 (axis-transform-compose (collapse-transform -1/2 1/2)
                                           (stretch-transform -1 1 4)))
    (values
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1])
         (output-fn (list (y-axis -1) (y-axis 1)
                     (y-axis -1/2) (y-axis 1/2)
                     (function values -2 2)
                     (function cos -2 2 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans2])
         (output-fn (list (y-axis -1) (y-axis 1)
                     (y-axis -1/2) (y-axis 1/2)
                     (function values -2 2)
                     (function cos -2 2 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1]
                      [plot-y-transform  trans2])
         (define xs (nonlinear-seq -2 2 20 trans1))
         (define ys (nonlinear-seq -2 2 20 trans2))
         (output-fn (points (map vector xs ys))))))))

(define-values (do-plot29 do-plot30 do-plot31)
  (let ()
    (define trans1 (axis-transform-compose (collapse-transform -1 1) (collapse-transform -1/2 1/2)))
    (define trans2 (axis-transform-compose (collapse-transform -1/2 1/2) (collapse-transform -1 1)))
    (values
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1])
         (output-fn (list (y-axis 1) (y-axis 1/2)
                          (function values -2 2)
                          (function cos -2 2 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans2])
         (output-fn (list (y-axis 1) (y-axis 1/2)
                          (function values -2 2)
                          (function cos -2 2 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1]
                      [plot-y-transform  trans2])
         (define xs (nonlinear-seq -2 2 20 trans1))
         (define ys (nonlinear-seq -2 2 20 trans2))
         (output-fn (points (map vector xs ys))))))))

(define (do-plot32 output-fn)
  (parameterize ([plot-x-transform  (collapse-transform -1 1)])
    (output-fn (function values 0 2))))

(define (do-plot33 output-fn)
  (parameterize ([plot-x-transform  (collapse-transform -1 1)])
    (output-fn (function values -2 0))))

(define (do-plot34 output-fn)
  (parameterize ([plot-x-transform  (axis-transform-append id-transform log-transform 0.1)])
    (output-fn (function sin -4 4))))

(define-values (do-plot35 do-plot36)
  (let ()
    (define trans (axis-transform-append id-transform log-transform 2))
    (define ticks (log-ticks #:base 10))
    (values
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans]
                      [plot-x-ticks      ticks])
         (output-fn (list (function values 1 15)
                          (function cos 1 15 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans]
                      [plot-y-transform  trans])
         (define xs (nonlinear-seq 1 15 20 trans))
         (output-fn (points (map vector xs xs))))))))

(define-values (do-plot37 do-plot38 do-plot39)
  (let ()
    (define t1 (stretch-transform 2 3 4))
    (define t2 (stretch-transform 7 8 4))
    (define trans1 (axis-transform-compose (axis-transform-append t1 t2 5) log-transform))
    (define trans2 (axis-transform-compose log-transform (axis-transform-append t1 t2 5)))
    (values
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1])
         (output-fn (list (for/list ([x  (in-list '(2 3 7 8))]) (y-axis x))
                          (function values 1 9)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans2])
         (output-fn (list (for/list ([x  (in-list '(2 3 7 8))]) (y-axis x))
                          (function values 1 9)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1]
                      [plot-y-transform  trans2])
         (define xs (nonlinear-seq 1 9 50 trans1))
         (define ys (nonlinear-seq 1 9 50 trans2))
         (output-fn (points (map vector xs ys))))))))

(define-values (do-plot40 do-plot41 do-plot42 do-plot43 do-plot44 do-plot45)
  (let ()
    (define trans1 (axis-transform-append log-transform id-transform 5))
    (define trans2 (axis-transform-append id-transform log-transform 5))
    (values
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1])
         (output-fn (list (y-axis 5)
                          (function values 6 10)
                          (function cos 6 10 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans2])
         (output-fn (list (y-axis 5)
                          (function values 6 10)
                          (function cos 6 10 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1]
                      [plot-y-transform  trans2])
         (define xs (nonlinear-seq 6 10 20 trans1))
         (define ys (nonlinear-seq 6 10 20 trans2))
         (output-fn (points (map vector xs ys)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1])
         (output-fn (list (y-axis 5)
                          (function values 1 4)
                          (function cos 1 4 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans2])
         (output-fn (list (y-axis 5)
                          (function values 1 4)
                          (function cos 1 4 #:color 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1]
                      [plot-y-transform  trans2])
         (define xs (nonlinear-seq 1 4 20 trans1))
         (define ys (nonlinear-seq 1 4 20 trans2))
         (output-fn (points (map vector xs ys))))))))

(define (do-plot46 output-fn)
  (parameterize ([plot-x-transform  (axis-transform-compose (collapse-transform 2 6)
                                                            log-transform)]
                 [plot-x-ticks      (ticks-add (log-ticks) '(2 6))])
    (output-fn (list (y-axis 2) (y-axis 6)
                     (function values 1 10)))))

(define-values (do-plot47 do-plot48 do-plot49)
  (let ()
    (define trans1 (axis-transform-bound log-transform 0.1 5))
    (define trans2 (axis-transform-bound (stretch-transform 1 2 4) 1 2))
    (values
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1])
         (output-fn (list (y-axis 0.1) (y-axis 5)
                          (function values -3 9)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans2])
         (output-fn (list (y-axis 1) (y-axis 2)
                          (function values 0 3)))))
     (lambda (output-fn)
       (parameterize ([plot-x-transform  trans1]
                      [plot-y-transform  trans2])
         (define xs (nonlinear-seq -3 9 20 trans1))
         (define ys (nonlinear-seq 0 3 20 trans2))
         (output-fn (points (map vector xs ys))))))))

(define-runtime-path at1-data "./test-data/at1.dat")
(define-runtime-path at2-data "./test-data/at2.dat")
(define-runtime-path at3-data "./test-data/at3.dat")
(define-runtime-path at4-data "./test-data/at4.dat")
(define-runtime-path at5-data "./test-data/at5.dat")
(define-runtime-path at6-data "./test-data/at6.dat")
(define-runtime-path at7-data "./test-data/at7.dat")
(define-runtime-path at8-data "./test-data/at8.dat")
(define-runtime-path at9-data "./test-data/at9.dat")
(define-runtime-path at10-data "./test-data/at10.dat")
(define-runtime-path at11-data "./test-data/at11.dat")
(define-runtime-path at12-data "./test-data/at12.dat")
(define-runtime-path at13-data "./test-data/at13.dat")
(define-runtime-path at14-data "./test-data/at14.dat")
(define-runtime-path at15-data "./test-data/at15.dat")
(define-runtime-path at16-data "./test-data/at16.dat")
(define-runtime-path at17-data "./test-data/at17.dat")
(define-runtime-path at18-data "./test-data/at18.dat")
(define-runtime-path at19-data "./test-data/at19.dat")
(define-runtime-path at20-data "./test-data/at20.dat")
(define-runtime-path at21-data "./test-data/at21.dat")
(define-runtime-path at22-data "./test-data/at22.dat")
(define-runtime-path at23-data "./test-data/at23.dat")
(define-runtime-path at24-data "./test-data/at24.dat")
(define-runtime-path at25-data "./test-data/at25.dat")
(define-runtime-path at26-data "./test-data/at26.dat")
(define-runtime-path at27-data "./test-data/at27.dat")
(define-runtime-path at28-data "./test-data/at28.dat")
(define-runtime-path at29-data "./test-data/at29.dat")
(define-runtime-path at30-data "./test-data/at30.dat")
(define-runtime-path at31-data "./test-data/at31.dat")
(define-runtime-path at32-data "./test-data/at32.dat")
(define-runtime-path at33-data "./test-data/at33.dat")
(define-runtime-path at34-data "./test-data/at34.dat")
(define-runtime-path at35-data "./test-data/at35.dat")
(define-runtime-path at36-data "./test-data/at36.dat")
(define-runtime-path at37-data "./test-data/at37.dat")
(define-runtime-path at38-data "./test-data/at38.dat")
(define-runtime-path at39-data "./test-data/at39.dat")
(define-runtime-path at40-data "./test-data/at40.dat")
(define-runtime-path at41-data "./test-data/at41.dat")
(define-runtime-path at42-data "./test-data/at42.dat")
(define-runtime-path at43-data "./test-data/at43.dat")
(define-runtime-path at44-data "./test-data/at44.dat")
(define-runtime-path at45-data "./test-data/at45.dat")
(define-runtime-path at46-data "./test-data/at46.dat")
(define-runtime-path at47-data "./test-data/at47.dat")
(define-runtime-path at48-data "./test-data/at48.dat")
(define-runtime-path at49-data "./test-data/at49.dat")

(define axis-transform-tests
  (test-suite
   "axis-transform-tests"
   (test-case "test case 1" (check-draw-steps do-plot1 at1-data))
   (test-case "test case 2" (check-draw-steps do-plot2 at2-data))
   (test-case "test case 3" (check-draw-steps do-plot3 at3-data))
   (test-case "test case 4" (check-draw-steps do-plot4 at4-data))
   (test-case "test case 5" (check-draw-steps do-plot5 at5-data))
   (test-case "test case 6" (check-draw-steps do-plot6 at6-data))
   (test-case "test case 7" (check-draw-steps do-plot7 at7-data))
   (test-case "test case 8" (check-draw-steps do-plot8 at8-data))
   (test-case "test case 9" (check-draw-steps do-plot9 at9-data))
   (test-case "test case 10" (check-draw-steps do-plot10 at10-data))
   (test-case "test case 11" (check-draw-steps do-plot11 at11-data))
   (test-case "test case 12" (check-draw-steps do-plot12 at12-data))
   (test-case "test case 13" (check-draw-steps do-plot13 at13-data))
   (test-case "test case 14" (check-draw-steps do-plot14 at14-data))
   (test-case "test case 15" (check-draw-steps do-plot15 at15-data))
   (test-case "test case 16" (check-draw-steps do-plot16 at16-data))
   (test-case "test case 17" (check-draw-steps do-plot17 at17-data))
   (test-case "test case 18" (check-draw-steps do-plot18 at18-data))
   (test-case "test case 19" (check-draw-steps do-plot19 at19-data))
   (test-case "test case 20" (check-draw-steps do-plot20 at20-data))
   (test-case "test case 21" (check-draw-steps do-plot21 at21-data))
   (test-case "test case 22" (check-draw-steps do-plot22 at22-data))
   (test-case "test case 23" (check-draw-steps do-plot23 at23-data))
   (test-case "test case 24" (check-draw-steps do-plot24 at24-data))
   (test-case "test case 25" (check-draw-steps do-plot25 at25-data))
   (test-case "test case 26" (check-draw-steps do-plot26 at26-data))
   (test-case "test case 27" (check-draw-steps do-plot27 at27-data))
   (test-case "test case 28" (check-draw-steps do-plot28 at28-data))
   (test-case "test case 29" (check-draw-steps do-plot29 at29-data))
   (test-case "test case 30" (check-draw-steps do-plot30 at30-data))
   (test-case "test case 31" (check-draw-steps do-plot31 at31-data))
   (test-case "test case 32" (check-draw-steps do-plot32 at32-data))
   (test-case "test case 33" (check-draw-steps do-plot33 at33-data))
   (test-case "test case 34" (check-draw-steps do-plot34 at34-data))
   (test-case "test case 35" (check-draw-steps do-plot35 at35-data))
   (test-case "test case 36" (check-draw-steps do-plot36 at36-data))
   (test-case "test case 37" (check-draw-steps do-plot37 at37-data))
   (test-case "test case 38" (check-draw-steps do-plot38 at38-data))
   (test-case "test case 39" (check-draw-steps do-plot39 at39-data))
   (test-case "test case 40" (check-draw-steps do-plot40 at40-data))
   (test-case "test case 41" (check-draw-steps do-plot41 at41-data))
   (test-case "test case 42" (check-draw-steps do-plot42 at42-data))
   (test-case "test case 43" (check-draw-steps do-plot43 at43-data))
   (test-case "test case 44" (check-draw-steps do-plot44 at44-data))
   (test-case "test case 45" (check-draw-steps do-plot45 at45-data))
   (test-case "test case 46" (check-draw-steps do-plot46 at46-data))
   (test-case "test case 47" (check-draw-steps do-plot47 at47-data))
   (test-case "test case 48" (check-draw-steps do-plot48 at48-data))
   (test-case "test case 49" (check-draw-steps do-plot49 at49-data))))

(module+ test
  (require rackunit/text-ui)
  (run-tests axis-transform-tests))
